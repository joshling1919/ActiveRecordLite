quit
options.foreign_key
options
self.foreign)key
self.foreign_key
Cat.where(owner_id: self.id)
options.model_class
self.id
self.send(:id)
self.send(id)
options.foreign_key
self
quit
n
self
options
quit
self.to_s
self.class
self
quit
name
self.superclass
self.class
self
self_class_name
quit
self_class_name
options
quit
options
HasManyOptions.new(name, options)
options
quit
n
@class_name
n
@foreign_key
n
"#{self_class_name}Id".underscore.to_sym
self
options[:foreign_key]
options
quit
options
quit
name
options.foreign_key
options
quit
model.where(id: foreign_id).first
model.where(id: foreign_id)
quit
human.fname
human
quit
c.methods.sort
c = Cat.new
Cat.methods.sort
quit
Cat.human.method_defined?
Cat.methods.sort
quit
breakfast
breakfast.belongs_to(:human)
Cat.methods.sort
Cat.methods
? Cat#human
? Cat#belongs_to
name
quit
breakfast.human
breakfast
human
n
model.where(id: foreign_id)
quit
options.model_class.where(id: 1)
options.model_class
self.send(options.foreign_key)
self
quit
quit y
Human.where(id: 1)
options.model_class
self.all.first.send(options.foreign_key)
self.all.first
self.first
self.first.send(options.foreign_key)
self.send(options.foreign_key)
options.foreign_key
options[:foreign_key]
self.send(options[:foreign_key])
self.send(options[:foreign_key]
self
self.find(1).owner_id
self.owner_id
self.find(1)
self.find(id)
self.table_name
self.all
self.where
self.methods.sort
self.methods
self.superclass
self
self.class
options.foreign_key
options[@foreign_key]
@foreign_key
self
name
options
quit
options
@foreign_key
quit
options
@foreign_key
quit
options[:foreign_key]
quit
options
name
quit
options
name
quit
BelongsToOptions.new(name, options)
self
options
name
